(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  (function(Backbone, Marionette, _, $) {
    var FacetItemView, FacetListView, Repo, RepoItemView, RepoListView, Repos, _ref, _ref1, _ref2, _ref3, _ref4, _ref5;
    Repo = (function(_super) {
      __extends(Repo, _super);

      function Repo() {
        _ref = Repo.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      return Repo;

    })(Backbone.Model);
    Repos = (function(_super) {
      __extends(Repos, _super);

      function Repos() {
        _ref1 = Repos.__super__.constructor.apply(this, arguments);
        return _ref1;
      }

      Repos.prototype.url = 'data/repos.json';

      Repos.prototype.model = Repo;

      Repos.prototype.typeaheadAttributes = ['name', 'description', 'language'];

      return Repos;

    })(Backbone.TypeaheadCollection);
    RepoItemView = (function(_super) {
      __extends(RepoItemView, _super);

      function RepoItemView() {
        _ref2 = RepoItemView.__super__.constructor.apply(this, arguments);
        return _ref2;
      }

      RepoItemView.prototype.tagName = 'li';

      RepoItemView.prototype.className = 'list-group-item';

      RepoItemView.prototype.template = Tmpl.repo_item;

      RepoItemView.prototype.hide = function() {
        return this.$el.hide();
      };

      RepoItemView.prototype.show = function() {
        return this.$el.show();
      };

      return RepoItemView;

    })(Marionette.ItemView);
    RepoListView = (function(_super) {
      __extends(RepoListView, _super);

      function RepoListView() {
        _ref3 = RepoListView.__super__.constructor.apply(this, arguments);
        return _ref3;
      }

      RepoListView.prototype.tagName = 'ul';

      RepoListView.prototype.className = 'list-group';

      RepoListView.prototype.itemView = RepoItemView;

      RepoListView.prototype.filter = function(models) {
        var model, _i, _len, _results;
        this.children.call('hide');
        _results = [];
        for (_i = 0, _len = models.length; _i < _len; _i++) {
          model = models[_i];
          _results.push(this.children.findByModel(model).show());
        }
        return _results;
      };

      return RepoListView;

    })(Marionette.CollectionView);
    FacetItemView = (function(_super) {
      __extends(FacetItemView, _super);

      function FacetItemView() {
        _ref4 = FacetItemView.__super__.constructor.apply(this, arguments);
        return _ref4;
      }

      FacetItemView.prototype.tagName = 'li';

      FacetItemView.prototype.template = Tmpl.facet_item;

      FacetItemView.prototype.events = {
        'click': function() {
          return this.trigger('facet', this.model.id);
        }
      };

      FacetItemView.prototype.applyFacet = function(facet) {
        return this.$el.toggleClass('active', this.model.id === facet);
      };

      return FacetItemView;

    })(Marionette.ItemView);
    FacetListView = (function(_super) {
      __extends(FacetListView, _super);

      function FacetListView() {
        _ref5 = FacetListView.__super__.constructor.apply(this, arguments);
        return _ref5;
      }

      FacetListView.prototype.tagName = 'ul';

      FacetListView.prototype.className = 'nav nav-stacked nav-pills';

      FacetListView.prototype.itemView = FacetItemView;

      FacetListView.prototype.applyFacet = function(facet) {
        return this.children.call('applyFacet', facet);
      };

      return FacetListView;

    })(Marionette.CollectionView);
    return $(function() {
      var applyTypeahead, facets, lastFacets, lastQuery, listView, repos;
      listView = null;
      facets = null;
      repos = new Repos();
      lastQuery = '';
      lastFacets = null;
      applyTypeahead = function() {
        var results;
        results = repos.typeahead(lastQuery, lastFacets);
        return listView.filter(results);
      };
      repos.fetch().done(function() {
        var facetView;
        facets = _(repos.pluck('language')).chain().compact().uniq().value().sort();
        facets = _.map(facets, function(l) {
          return {
            id: l
          };
        });
        facets = new Backbone.Collection(facets);
        facetView = new FacetListView({
          collection: facets
        });
        facetView.on('itemview:facet', function(iv, facet) {
          if ((lastFacets != null ? lastFacets.language : void 0) !== facet) {
            lastFacets = {
              language: facet
            };
          }
          facetView.applyFacet(lastFacets != null ? lastFacets.language : void 0);
          return applyTypeahead();
        });
        listView = new RepoListView({
          collection: repos
        });
        $('#facet').append(facetView.render().el);
        return $('#list').append(listView.render().el);
      });
      return $('input').keyup(function(e) {
        lastQuery = $(this).val();
        return applyTypeahead();
      });
    });
  })(Backbone, Marionette, _, $);

}).call(this);
